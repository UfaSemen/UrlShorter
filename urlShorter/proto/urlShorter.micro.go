// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: urlShorter.proto

/*
Package urlShorter is a generated protocol buffer package.

It is generated from these files:
	urlShorter.proto

It has these top-level messages:
	ShortRequest
	ShortResponse
	FullRequest
	FullResponse
*/
package urlShorter

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for UrlShorter service

type UrlShorterService interface {
	GetShort(ctx context.Context, in *ShortRequest, opts ...client.CallOption) (*ShortResponse, error)
	GetFull(ctx context.Context, in *FullRequest, opts ...client.CallOption) (*FullResponse, error)
}

type urlShorterService struct {
	c    client.Client
	name string
}

func NewUrlShorterService(name string, c client.Client) UrlShorterService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "urlshorter"
	}
	return &urlShorterService{
		c:    c,
		name: name,
	}
}

func (c *urlShorterService) GetShort(ctx context.Context, in *ShortRequest, opts ...client.CallOption) (*ShortResponse, error) {
	req := c.c.NewRequest(c.name, "UrlShorter.GetShort", in)
	out := new(ShortResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *urlShorterService) GetFull(ctx context.Context, in *FullRequest, opts ...client.CallOption) (*FullResponse, error) {
	req := c.c.NewRequest(c.name, "UrlShorter.GetFull", in)
	out := new(FullResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UrlShorter service

type UrlShorterHandler interface {
	GetShort(context.Context, *ShortRequest, *ShortResponse) error
	GetFull(context.Context, *FullRequest, *FullResponse) error
}

func RegisterUrlShorterHandler(s server.Server, hdlr UrlShorterHandler, opts ...server.HandlerOption) error {
	type urlShorter interface {
		GetShort(ctx context.Context, in *ShortRequest, out *ShortResponse) error
		GetFull(ctx context.Context, in *FullRequest, out *FullResponse) error
	}
	type UrlShorter struct {
		urlShorter
	}
	h := &urlShorterHandler{hdlr}
	return s.Handle(s.NewHandler(&UrlShorter{h}, opts...))
}

type urlShorterHandler struct {
	UrlShorterHandler
}

func (h *urlShorterHandler) GetShort(ctx context.Context, in *ShortRequest, out *ShortResponse) error {
	return h.UrlShorterHandler.GetShort(ctx, in, out)
}

func (h *urlShorterHandler) GetFull(ctx context.Context, in *FullRequest, out *FullResponse) error {
	return h.UrlShorterHandler.GetFull(ctx, in, out)
}
